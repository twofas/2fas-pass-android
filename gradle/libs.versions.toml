[versions]
agp = "8.12.1"
cameraX = "1.4.2"
coil = "3.3.0"
composeActivity = "1.10.1"
composeNavigation = "2.9.3"
composeBom = "2025.08.00"
credentials = "1.5.0"
firebase = "34.1.0"
elmyr = "1.3.4"
koin = "4.1.0"
kotlin = "2.2.10"
kotlinCoroutines = "1.10.2"
kotlinKsp = "2.2.10-2.0.2"
ktor = "3.2.3"
ktlint = "5.1.1"
lifecycle = "2.9.2"
room = "2.7.2"
pluto = "3.0.1"
revenuecat = "9.3.0"
junit = "4.13.2"
kotest = "6.0.0"
espresso = "3.7.0"
uiAndroid = "1.9.0"
aboutLibraries = "12.2.4"

[libraries]
appcompat = "androidx.appcompat:appcompat:1.7.1"
argon2 = "com.lambdapioneer.argon2kt:argon2kt:1.6.0"
autofill = "androidx.autofill:autofill:1.3.0"
barcodeScanning = "com.google.mlkit:barcode-scanning:17.3.0"
biometric = "androidx.biometric:biometric:1.4.0-alpha04"
camera2 = { module = "androidx.camera:camera-camera2", version.ref = "cameraX" }
camera2Lifecycle = { module = "androidx.camera:camera-lifecycle", version.ref = "cameraX" }
camera2View = { module = "androidx.camera:camera-view", version.ref = "cameraX" }
coil = { module = "io.coil-kt.coil3:coil-compose", version.ref = "coil" }
coilSvg = { module = "io.coil-kt.coil3:coil-svg", version.ref = "coil" }
coilNetwork = { module = "io.coil-kt.coil3:coil-network-okhttp", version.ref = "coil" }
coilCacheControl = { module = "io.coil-kt.coil3:coil-network-cache-control", version.ref = "coil" }
composeActivity = { module = "androidx.activity:activity-compose", version.ref = "composeActivity" }
composeNavigation = { module = "androidx.navigation:navigation-compose", version.ref = "composeNavigation" }
composeBom = { group = "androidx.compose", name = "compose-bom", version.ref = "composeBom" }
composeFoundation = { module = "androidx.compose.animation:animation" }
composeAnimation = { module = "androidx.compose.animation:animation" }
composeMaterial2 = { module = "androidx.compose.material:material" }
composeMaterial3 = { module = "androidx.compose.material3:material3" }
composeMaterial3Window = { module = "androidx.compose.material3:material3-window-size-class" }
composeMaterial3Adaptive = "androidx.compose.material3.adaptive:adaptive:1.1.0"
composeUi = { module = "androidx.compose.ui:ui" }
composeUiTooling = { module = "androidx.compose.ui:ui-tooling" }
credentialsPlayServices = { module = "androidx.credentials:credentials-play-services-auth", version.ref = "credentials" }
credentials = { module = "androidx.credentials:credentials", version.ref = "credentials" }
coreSplash = "androidx.core:core-splashscreen:1.0.1"
colorPicker = "com.github.skydoves:colorpicker-compose:1.1.2"
dataStore = "androidx.datastore:datastore-preferences:1.1.7"
desugar = "com.android.tools:desugar_jdk_libs:2.1.5"
firebaseBom = { module = "com.google.firebase:firebase-bom", version.ref = "firebase" }
firebaseCrashlytics = { module = "com.google.firebase:firebase-crashlytics" }
firebaseMessaging = { module = "com.google.firebase:firebase-messaging" }
elmyrCore = { module = "com.github.xgouchet.Elmyr:core", version.ref = "elmyr" }
elmyrJunit4 = { module = "com.github.xgouchet.Elmyr:junit4", version.ref = "elmyr" }
googleApiClientAndroid = "com.google.api-client:google-api-client-android:2.8.1"
googleAuth = "com.google.android.gms:play-services-auth:21.4.0"
googleDrive = "com.google.apis:google-api-services-drive:v3-rev20250717-2.0.0"
googleId = "com.google.android.libraries.identity.googleid:googleid:1.1.1"
googleApiHttpClientFork = "com.github.cryptomator:google-http-java-client:1.44.2-dev.0001"
javaxInject = "javax.inject:javax.inject:1"
koinCompose = { module = "io.insert-koin:koin-androidx-compose", version.ref = "koin" }
kotlinCoroutines = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-android", version.ref = "kotlinCoroutines" }
kotlinSerialization = "org.jetbrains.kotlinx:kotlinx-serialization-json:1.9.0"
ktorAuth = { module = "io.ktor:ktor-client-auth", version.ref = "ktor" }
ktorContentNegotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktorCore = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktorKotlinSerialization = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
ktorLogging = { module = "io.ktor:ktor-client-logging", version.ref = "ktor" }
ktorOkhttp = { module = "io.ktor:ktor-client-okhttp", version.ref = "ktor" }
ktorWebSockets = { module = "io.ktor:ktor-client-websockets", version.ref = "ktor" }
lifecycle = { module = "androidx.lifecycle:lifecycle-viewmodel-ktx", version.ref = "lifecycle" }
lifecycleCompose = { module = "androidx.lifecycle:lifecycle-viewmodel-compose", version.ref = "lifecycle" }
lifecycleComposeRuntime = { module = "androidx.lifecycle:lifecycle-runtime-compose", version.ref = "lifecycle" }
lifecycleLifecycle = { module = "androidx.lifecycle:lifecycle-runtime-ktx", version.ref = "lifecycle" }
lifecycleProcess = { module = "androidx.lifecycle:lifecycle-process", version.ref = "lifecycle" }
lifecycleSavedstate = { module = "androidx.lifecycle:lifecycle-viewmodel-savedstate", version.ref = "lifecycle" }
lottie = "com.airbnb.android:lottie-compose:6.6.7"
material = "com.google.android.material:material:1.12.0"
opencsv = "com.opencsv:opencsv:5.12.0"
playServicesCorutines = "org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.10.2"
revenuecat = { module = "com.revenuecat.purchases:purchases", version.ref = "revenuecat" }
revenuecatUi = { module = "com.revenuecat.purchases:purchases-ui", version.ref = "revenuecat" }
roomCompiler = { module = "androidx.room:room-compiler", version.ref = "room" }
roomKtx = { module = "androidx.room:room-ktx", version.ref = "room" }
roomRuntime = { module = "androidx.room:room-runtime", version.ref = "room" }
timber = "com.jakewharton.timber:timber:5.0.1"
truetime = "com.github.instacart:truetime-android:4.0.0.alpha"
workManager = "androidx.work:work-runtime-ktx:2.10.3"
webkit = "androidx.webkit:webkit:1.14.0"
pdfbox = "com.tom-roush:pdfbox-android:2.0.27.0"
pluto = { module = "com.androidpluto:pluto", version.ref = "pluto" }
plutoNoOp = { module = "com.androidpluto:pluto-no-op", version.ref = "pluto" }
plutoRoom = { module = "com.androidpluto.plugins:rooms-db", version.ref = "pluto" }
plutoRoomNoOp = { module = "com.androidpluto.plugins:rooms-db-no-op", version.ref = "pluto" }
plutoDataStore = { module = "com.androidpluto.plugins:datastore-pref", version.ref = "pluto" }
plutoDataStoreNoOp = { module = "com.androidpluto.plugins:datastore-pref-no-op", version.ref = "pluto" }
plutoLogger = { module = "com.androidpluto.plugins:logger", version.ref = "pluto" }
plutoLoggerNoOp = { module = "com.androidpluto.plugins:logger-no-op", version.ref = "pluto" }
mockk = "io.mockk:mockk:1.14.5"
junit = { module = "junit:junit", version.ref = "junit" }
kotest = { module = "io.kotest:kotest-assertions-core", version.ref = "kotest" }
turbine = "app.cash.turbine:turbine:1.2.1"
uiTestJunit = { module = "androidx.compose.ui:ui-test-junit4" }
uiTestManifest = { module = "androidx.compose.ui:ui-test-manifest" }
uiTestNavigation = { module = "androidx.navigation:navigation-testing", version.ref = "composeNavigation" }
uiTestRunner = "androidx.test:runner:1.7.0"
uiTestOrchestrator = "androidx.test:orchestrator:1.6.1"
testCore = "androidx.test:core:1.7.0"
robolectric = "org.robolectric:robolectric:4.15.1"
slf4jNoOp = "org.slf4j:slf4j-nop:2.0.17"
kotlinCoroutinesTest = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "kotlinCoroutines" }
kotlinTestJunit = { module = "org.jetbrains.kotlin:kotlin-test-junit", version.ref = "kotlin" }
koinTest = { module = "io.insert-koin:koin-test", version.ref = "koin" }
koinTestJunit = { module = "io.insert-koin:koin-test-junit4", version.ref = "koin" }
espressoCore = { module = "androidx.test.espresso:espresso-core", version.ref = "espresso" }
zxing = "com.google.zxing:core:3.5.3"
uiAndroid = { group = "androidx.compose.ui", name = "ui-android", version.ref = "uiAndroid" }
aboutLibrariesCore = { module = "com.mikepenz:aboutlibraries-core", version.ref = "aboutLibraries" }
aboutLibrariesCompose = { module = "com.mikepenz:aboutlibraries-compose-m3", version.ref = "aboutLibraries" }

[bundles]
aboutLibraries = [
    "aboutLibrariesCore",
    "aboutLibrariesCompose",
]
barcodeScanner = [
    "barcodeScanning",
    "camera2",
    "camera2Lifecycle",
    "camera2View",
]
coil = [
    "coil",
    "coilSvg",
    "coilNetwork",
    "coilCacheControl"
]
compose = [
    "composeFoundation",
    "composeActivity",
    "composeAnimation",
    "composeMaterial2",
    "composeMaterial3",
    "composeMaterial3Window",
    "composeMaterial3Adaptive",
    "composeNavigation",
    "composeUi",
    "composeUiTooling",
    "material"
]
elmyr = [
    "elmyrCore",
    "elmyrJunit4",
]
koin = [
    "koinCompose",
]
ktor = [
    "ktorAuth",
    "ktorContentNegotiation",
    "ktorCore",
    "ktorKotlinSerialization",
    "ktorLogging",
    "ktorOkhttp",
    "ktorWebSockets",
]
room = [
    "roomKtx",
    "roomRuntime",
]
viewModel = [
    "lifecycle",
    "lifecycleCompose",
    "lifecycleComposeRuntime",
    "lifecycleLifecycle",
    "lifecycleProcess",
    "lifecycleSavedstate",
]

[plugins]
agpApplication = { id = "com.android.application", version.ref = "agp" }
agpLibrary = { id = "com.android.library", version.ref = "agp" }
gradleVersions = "com.github.ben-manes.versions:0.52.0"
kotlinAndroid = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
kotlinKsp = { id = "com.google.devtools.ksp", version.ref = "kotlinKsp" }
kotlinParcelize = { id = "org.jetbrains.kotlin.plugin.parcelize", version.ref = "kotlin" }
kotlinSerialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
kotlinComposeCompiler = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }
ktlint = { id = "org.jmailen.kotlinter", version.ref = "ktlint" }
twofasAndroidApplication = "twofas.androidApplication:unspecified"
twofasAndroidLibrary = "twofas.androidLibrary:unspecified"
twofasCompose = "twofas.compose:unspecified"
twofasLint = "twofas.lint:1"
aboutLibraries = { id = "com.mikepenz.aboutlibraries.plugin", version.ref = "aboutLibraries" }
versionCatalogUpdate = "nl.littlerobots.version-catalog-update:0.8.5"
