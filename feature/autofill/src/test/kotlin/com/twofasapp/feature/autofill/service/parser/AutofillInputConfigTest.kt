package com.twofasapp.feature.autofill.service.parser

import io.kotest.matchers.shouldBe
import org.junit.Test

class AutofillInputConfigTest {
    private val testedUsernameRawHints = setOf(
        "EMAIL",
        "email",
        "email-id",
        "email_id",
        "emailaddress",
        "email-address",
        "email_address",
        "e-mail",
        "e_mail",
        "login",
        "login-id",
        "login_id",
        "login-email",
        "login_email",
        "login-user",
        "login_user",
        "login-name",
        "login_name",
        "user",
        "user-id",
        "user_id",
        "user-email",
        "user_email",
        "user-login",
        "user_login",
        "user-login-id",
        "user_login_id",
        "user-name",
        "user_name",
        "username",
        "emailid",
        "userid",
        "loginid",
        "logonid",
        "userlogin",
        "user_login",
        "user-logon",
        "user_logon",
        "login-userid",
        "login_userid",
        "login-username",
        "login_username",
        "login-input-email",
        "login_input_email",
        "login-input-username",
        "login_input_username",
        "account",
        "account-name",
        "account_name",
        "account-id",
        "account_id",
        "accountname",
        "account_name_text_field",
        "auth-email",
        "auth_email",
        "auth-email-id",
        "auth_email_id",
        "auth-login",
        "auth_login",
        "auth-user",
        "auth_user",
        "signin-email",
        "signin_email",
        "signin-email-id",
        "signin_email_id",
        "signin-login",
        "signin_login",
        "signin-user",
        "signin_user",
        "signup-email",
        "signup_email",
        "signup-email-id",
        "signup_email_id",
        "signup-login",
        "signup_login",
        "signup-user",
        "signup_user",
        "register-email",
        "register_email",
        "register-email-id",
        "register_email_id",
        "register-login",
        "register_login",
        "register-user",
        "register_user",
        "widget-user-email",
        "widget_user_email",
        "widget-email",
        "widget_email",
        "widget-login",
        "widget_login",
        "widget-user",
        "widget_user",
        "user_email_login",
        "login_emailid",
        "login_email_id",
        "user_login_email",
        "login_input",
        "user_login_input",
        "login_user_input",
    )

    private val testedPasswordRawHints = setOf(
        "account-pass",
        "account-password",
        "account_pwd",
        "auth-pass",
        "auth-password",
        "auth_pwd",
        "login-input-pass",
        "login-input-password",
        "login-input-pwd",
        "login-pass",
        "login-password",
        "login-pwd",
        "pass",
        "pass-code",
        "pass-key",
        "passcode",
        "passkey",
        "passwd",
        "password",
        "password-input",
        "password-text",
        "pwd",
        "PWD",
        "pwd-input",
        "register-pass",
        "register-password",
        "register_pwd",
        "security-pass",
        "security-password",
        "security_pwd",
        "signin-pass",
        "signin-password",
        "signin_pwd",
        "signup-pass",
        "signup-password",
        "signup_pwd",
        "user-pass",
        "user-password",
        "user-pwd",
        "user_pass",
        "user_password",
        "userpassword",
        "widget-pass",
        "widget-password",
        "widget_pwd",
    )

    @Test
    fun `test username raw hints regex`() {
        testedUsernameRawHints.forEach { str ->
            AutofillInputConfig.Username.keywords.contains(str.sanitizeHint()) shouldBe true
        }
    }

    @Test
    fun `test password raw hints regex`() {
        testedPasswordRawHints.forEach { str ->
            AutofillInputConfig.Password.keywords.contains(str.sanitizeHint()) shouldBe true
        }
    }
}